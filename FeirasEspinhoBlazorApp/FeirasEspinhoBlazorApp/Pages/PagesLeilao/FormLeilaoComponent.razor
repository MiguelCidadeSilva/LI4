@page "/formleilao"
@using SourceCode.Feiras;
@using SourceCode.Stands;
@using SourceCode;
@using SourceCode.WebClasses;
@using FeirasEspinhoBlazorApp.Pages.PagesFeira;
@inject SistemaFeiras facade;

<div>
	<h2>Formulário Leilão</h2>
	@if(erro != 0)
	{
		<WarningComponent mensagem="@codigosErro[erro]" sucess ="false" page="14"/>
	}
	<div>
		<label><b>Quantidade a leiloar</b></label>
		<input type="text" class="tb" id="quantidade" name="quantidade" placeholder="Insira a quantidade a vender" @bind-value="quantidade" />
		<br />
		<label><b>Valor máximo</b></label>
		<input type="text" class="tb" id="valormax" name="valormax" @bind-value="valorMax" />
		<br />
		<label><b>Valor mínimo</b></label>
		<input type="text" class="tb" id="valormin" name="valormin" @bind-value="valorMin" />
		<br />
		<label><b>Data Limite (DD-MM-AAAA)</b></label>
		<input type="text" class="tb" id="date" name="date" @bind-value="date" />
	</div>
	<br />
	<div class="tableFixHead">
		<table>
			<thead>
				<tr>
					<th>Produto</th>
					<th>Preço</th>
					<th>Stock</th>
				</tr>
			</thead>
			<tbody>
			@foreach (var produto in tabelContent.Content)
			{
				<tr class=@tabelContent.Cssclasses[produto.Item1] @onclick="() => tabelContent.SelectedRow(produto.Item1)">
					<td> @produto.Item2.Nome</td>
					<td> @produto.Item2.Preco</td>
					<td> @produto.Item2.Stock</td>
				</tr>
			}
			</tbody>
		</table>
	</div>
	<br />
	<div>
		<button class="buttonA buttonTable1" @onclick="CriarLeilao">Criar Leilão</button>
		<button class="buttonA" @onclick="Retroceder">Retroceder</button>
	</div>
</div>
@code 
{
	[Parameter, EditorRequired]
	public int idStand { get; set; }
	[Parameter, EditorRequired]
	public int idFeira { get; set; }
	private int quantidade = 0;
	private int valorMax = 0;
	private int valorMin = 0;
	private string date = "";
	private Table<Produto> tabelContent;
	private int lp = -1;
	private int erro = 0;
	private Dictionary<int, string> codigosErro = new Dictionary<int, string>();
	private static FormLeilaoComponent component;
	protected override void OnInitialized()
	{
		component = this;
		codigosErro[1] = "Data no formato errado";
		codigosErro[2] = "Produto não selecionado";
		codigosErro[3] = "Quantidade e valores tem que ser positivos";
		Stand stand = facade.GetStand(idStand);
		List<Produto> conteudo = stand.Produtos;
		this.tabelContent = new Table<Produto>(conteudo);
	}
	public static FormLeilaoComponent GetInstance()
	{
		return component;
	}
	public void CleanWarning()
	{
		erro = 0;
		StateHasChanged();
	}
	private void CriarLeilao()
	{
		DateTime param;
		if (date.Count(c => (c == '-')) != 2 || !DateTime.TryParse(date, out param))
		{
			this.date = "";
			this.erro = 1;
		}
		else if(!tabelContent.IdValid())
		{
			this.erro = 2;
		}
		else if(quantidade <= 0 || valorMax < 0 || valorMin < 0)
		{
			this.erro = 3;
		}
		else
		{
			Produto p = tabelContent.GetElement();
			Leilao l = new Leilao(0, param, valorMin, valorMax != 0 ? valorMax : null, p.IdProduto, p.Stand, idStand, idFeira, 0);
			facade.AddLeilao(l);
			ShowLeiloesComponent.GetInstance().GetBack("Leilão criado");
		}
			
	}
	private void Retroceder()
	{
		FeiraSelectComponent.GetInstance().GetBack();
	}

}
