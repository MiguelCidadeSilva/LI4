@page "/showleilao"
@using SourceCode.Feiras;
@using SourceCode.Stands;
@using SourceCode;
@using SourceCode.Utilizadores;
@inject SistemaFeiras facade;

<PageTitle>Leilão</PageTitle>
<h2>Bem vindo ao Leilão</h2>

@if(erro)
{
	<WarningComponent mensagem="@codigo_erro" page="7" sucess="false"/>
}
<div>
	<label><b>Produto</b></label>
	<input type="text" class="tb" id="produto" name="produto" readonly="readonly" @bind-value="produto.Nome" />
	<label><b>Quantidade</b></label>
	<input type="text" class="tb" id="quantidade" name="quantidade" readonly="readonly" @bind-value="quantidade" />
	<label><b>Valor máximo</b></label>
	<input type="text" class="tb" id="valorMax" name="valorMax" readonly="readonly" @bind-value="valorMax" />
	<label><b>Valor minimo</b></label>
	<input type="text" class="tb" id="valorMax" name="valorMax" readonly="readonly" @bind-value="valorMin" />
	<label><b>Última licitação</b></label>
	<input type="text" class="tb" id="valorUltimaBid" name="valorUltimaBid" readonly="readonly" @bind-value="ultimaLicitação" />
	@if(isClient)
	{
		<label><b>Valor da licitação</b></label>
		<input type="text" class="tb" id="valorLicitação" name="valorLicitação" placeholder="xxxxxxxx" @bind-value="valorLicitação" />
	}
</div>
<div>
	@if(isClient && podeLicitar)
	{
		<button class="buttonA buttonTable1" @onclick="Licitar">Licitar</button>
	}
	<button class="buttonA" @onclick="Voltar">Voltar</button>
</div>

@code 
{
	[Parameter, EditorRequired]
	public Leilao leilao { get; set; }
	[Parameter, EditorRequired]
	public string email { get; set; }
	[Parameter, EditorRequired]
	public ShowLeiloesComponent component { get; set; }
	private float ultimaLicitação;
	private float valorLicitação;
	private string valorMax = "-";
	private bool podeLicitar;
	private int quantidade;
	private float valorMin;
	private Produto produto;
	private string codigo_erro = "";
	private bool erro = false;
	private bool isClient;
	protected override void OnInitialized()
	{
		if (leilao.ValormMaximo.HasValue)
			valorMax = leilao.ValormMaximo.Value.ToString();
		isClient = facade.GetUtilizador(email) is Cliente;
		produto = facade.GetProduto(leilao.Produto);
		quantidade = leilao.Quantidade;
		ultimaLicitação = leilao.BidAtual;
		valorMin = leilao.ValormMinimo;
		podeLicitar = (leilao.ValormMaximo.HasValue ? leilao.ValormMaximo.Value > leilao.BidAtual : true) && leilao.Date.CompareTo(DateTime.Today) <= 0;
	}
	private void Licitar()
	{
		CleanWarning();
		try
		{
			facade.Licitar(leilao.Id, email, valorLicitação);
			component.GetBack("Licitação registada");
		}
		catch (Exception e)
		{
			erro = true;
			codigo_erro = e.Message;
		}
	}
	private void Voltar()
	{
		component.GetBack();
	}
	public void CleanWarning()
	{
		codigo_erro = "";
		erro = false;
		StateHasChanged();
	}


}
