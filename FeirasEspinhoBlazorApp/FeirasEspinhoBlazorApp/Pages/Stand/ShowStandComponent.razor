@page "/showstand/{standStr}"
@page "/showstand/{standStr}/{sucessStr}/{sucessMessage}"
@page "/showstand/{standStr}/{erroStr}"
@using SourceCode.WebClasses;
@using SourceCode.Stands;
@using SourceCode;
@using System.Text.Json;
@inject NavigationManager navigationManager

<div>
	<h3>Bem vindo ao stand</h3>
	<br />
	@if (erro != 0)
	{
		<WarningComponent mensagem="@codigosErro[erro]" sucess="false" page="5"/>
	}
	else if (sucess)
	{
		<WarningComponent mensagem="@sucessMessage" sucess="true" page="5"/>
	}
	<div class="tableFixHead">
		<table>
			<thead>
				<tr>
					<th>Produto</th>
					<th>Preço</th>
					<th>Stock</th>
					<th>Quantidade</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var produto in tabelContent.Content)
				{
					<tr class=@tabelContent.Cssclasses[produto.Item1]>
						<td> @produto.Item2.IdProduto</td>
						<td> @produto.Item2.Preco</td>
						<td> @produto.Item2.Stock</td>
						<td> <input type="text" class="tb tb_smaller" id="quantidade" name="quantidade" placeholder="Quantidade" @oninput="(args) => RecalculaPrecoTotal(args,produto.Item1)"/></td>
					</tr>
				}
			</tbody>
		</table>
	</div>
	<br />
	<div>
		<br />
		<label><b>Preço total</b></label>
		<input type="text" class="tb tb_smaller" id="precoTotal" name="precoTotal" @bind-value="@precoTotal" readonly="readonly" />
	</div>
	<br />
	<div>
		<button class="buttonA buttonTable1" @onclick="CompraRapida">Comprar Rápida</button>
		<button class="buttonA buttonTable2" @onclick="Negociar">Negociar</button>
		<button class="buttonA">Retroceder</button>
	</div>
</div>
@code
{
	[Parameter]
	public string sucessStr { get; set; }
	[Parameter]
	public string sucessMessage { get; set; }
	[Parameter]
	public string erroStr { get; set; }
	[Parameter]
	public string standStr { get; set; }
	private Stand stand;
	private int erro;
	private int count = 0;
	private int count2 = 0;
	private Table<Produto> tabelContent;
	private bool sucess;
	private float precoTotal = 0;
	private Dictionary<int, string> codigosErro = new Dictionary<int, string>();
	private Dictionary<int, float> quantidades = new Dictionary<int, float>();
	private static ShowStandComponent standComponent;
	protected override void OnParametersSet()
	{
		if(!int.TryParse(erroStr, out erro))
			erro = 0;
		if (!bool.TryParse(sucessStr, out sucess))
			sucess = false ;
	}
	protected override async void OnInitialized()
	{
		standComponent = this;
		List<Produto> conteudo = new List<Produto>();
		conteudo.Add(new Produto(1, "bra",1,2,3,4f,true));
		conteudo.Add(new Produto(2, "por",1,2,3,4f,true));
		conteudo.Add(new Produto(3, "li4",1,2,3,4f,true));
		conteudo.Add(new Produto(4, "abc",1,2,3,4f,true));
		conteudo.Add(new Produto(5, "def",1,2,3,4f,true));
		conteudo.Add(new Produto(6, "ghi",1,2,3,4f,true));
		conteudo.Add(new Produto(7, "jkl",1,2,3,4f,true));
		this.tabelContent = new Table<Produto>(conteudo);
		for(int i = 0; i < conteudo.Count; i++)
			quantidades[i] = 0;
		codigosErro[1] = "Nenhum stand selecionado";
		codigosErro[2] = "Compra cancelada";
		codigosErro[3] = "Negociação cancelada";
	}
	public static ShowStandComponent GetInstance()
	{
		return standComponent;
	}
	public void CleanWarning()
	{
		this.erro = 0;
		sucess = false;
		StateHasChanged();
	}
	private void RecalculaPrecoTotal(ChangeEventArgs args, int key)
	{
		float number;
		if(float.TryParse(args.Value.ToString(),out number))
		{
			count++;
			quantidades[key] = number;
		}
		else
		{
			count2++;
			quantidades[key] = 0;
		}
		precoTotal = quantidades.Keys.ToList().Select(id => tabelContent.Content[id].Item2.Preco * quantidades[id]).Sum();
	}
	public void CompraRapida()
	{
		navigationManager.NavigateTo("fastpurchase");
	}
	public void Negociar()
	{
		navigationManager.NavigateTo("negociation");
		
	}
	public void Retroceder()
	{
		
	}
}
