@page "/showfeirastands"
@using SourceCode.WebClasses;
@using SourceCode.Stands;
@using SourceCode.Utilizadores;
@using SourceCode;
@using SourceCode.Feiras;
@using System.Text.Json;
@using FeirasEspinhoBlazorApp.Pages.PagesStand;
@using FeirasEspinhoBlazorApp.Pages.PagesLeilao;
@inject NavigationManager navigationManager

<PageTitle>Stands</PageTitle>

<div>
	@if (showAvaliacao)
	{
		<EvaluationComponent avaliar="1" email="@email" feirante="@feirante" idFeira="-1"/>

	}
	else if (showStand)
	{
		<ShowStandComponent idStand="@idStand" idFeira="@idFeira" email="@email"/>
	}
	else if (showLeilao)
	{
		<ShowStandLeilaoComponent idFeira="@idFeira" idStand="@idStand" email="@email"/>
	}
	else if(showCandidatura)
	{
		<FormCandidaturaComponent email="@email" idFeira="@idFeira" idStand="@idStand" />
	}
	else
	{
		<h2>Stands disponíveis</h2>
		<br />
		@if (erro != 0)
		{
			<WarningComponent mensagem="@codigosErro[erro]" sucess="false" page="4"/>
		}
		<div class="tableFixHead">
			<table>
				<thead>
					<tr>
						<th>Id</th>
						<th>Feirante</th>
						<th>Data Criação</th>
						<th>Categoria</th>
						<th>Avaliação Feirante</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var stand in tabelContent.Content)
					{
						<tr class=@tabelContent.Cssclasses[stand.Item1] @onclick="() => tabelContent.SelectedRow(stand.Item1)">
							<td> @stand.Item2.IdStand</td>
							<td> @nomes[stand.Item2.EmailDono]</td>
							<td> @stand.Item2.DataCriacao.ToShortDateString()</td>
							<td> @categoria[stand.Item2.IdStand].Name</td>
							@if (stand.Item3.HasValue)
							{
								<td> @stand.Item3.Value</td>
							}
							else
							{
								<td><b>-</b></td>
							}
						</tr>
					}
				</tbody>
			</table>
		</div>
		<br />
		<div>
			@if(type)
			{
				<button class="buttonA buttonTable1" @onclick="ConsultarStand">Consultar Stand</button>
				<button class="buttonA buttonTable2" @onclick="ConsultarLeiloes">Consultar Leilões</button>
			}
			else
			{
				<button class="buttonA buttonTable1" @onclick="SelecionarStand">Selecionar Stand</button>
			}
			<button class="buttonA" @onclick="Retroceder">Retroceder</button>
		</div>
	}
</div>
@code {
	[Parameter, EditorRequired]
	public string email { get; set; }
	[Parameter, EditorRequired]
	public int idFeira { get; set; }
	private SistemaFeiras facade = SistemaFeiras.GetInstance();
	private Feira feira;
	private string feirante = "";
	private bool showAvaliacao = false;
	private bool showStand = false;
	private bool showLeilao = false;
	private bool showCandidatura = false;
	private bool type;
	private int idStand = 0;
	private Dictionary<int, Categoria> categoria = new();
	private Dictionary<string, string> nomes = new();
	private Table<Stand> tabelContent;
	private int erro = 0;
	private Dictionary<int, string> codigosErro = new();
	private static ShowFeiraStandsComponent showBancas;
	private void InitializeContent()
	{
		Utilizador utilizador = facade.GetUtilizador(email);
		type = utilizador is Cliente;
		List<(Stand, float?)> conteudo = new();
		List<Stand> stands;
		if (type)
		{
			showBancas = this;
			stands = facade.GetStandsFeira(idFeira);
			stands.ForEach(s => conteudo.Add((s, facade.GetAvaliacoesStands(s.IdStand))));
			if (nomes.Count() == 0)
			{
				foreach (Stand s in stands)
				{
					Utilizador dono = facade.GetUtilizador(s.EmailDono);
					nomes[dono.Email] = dono.Username;
				}
			}
		}
		else
		{
			stands = facade.GetStandFeirante(email, idFeira);
			if (nomes.Count() == 0)
			{
				nomes[utilizador.Email] = utilizador.Username;
			}
			stands.ForEach(s => conteudo.Add((s, 0)));
		}
		if(categoria.Count == 0)
			stands.ForEach(s => categoria.Add(s.IdStand, facade.GetCategoria(s.Categoria)));
		this.tabelContent = new Table<Stand>(conteudo);
	}
	protected override void OnInitialized()
	{
		InitializeContent();
		codigosErro[1] = "Nenhum stand selecionado";
	}
	public static ShowFeiraStandsComponent GetInstace()
	{
		return showBancas;
	}
	public void CleanWarning()
	{
		this.erro = 0;
		StateHasChanged();
	}
	public void ConsultarStand()
	{
		if (tabelContent.IdValid())
		{
			erro = 0;
			Stand s = tabelContent.GetElement();
			idStand = s.IdStand;
			showStand = true;
			showAvaliacao = false;
			showLeilao = false;
			showCandidatura = false;
		}
		else
		{
			erro = 1;
		}
	}

	public void ConsultarLeiloes()
	{
		if (tabelContent.IdValid())
		{
			erro = 0;
			Stand s = tabelContent.GetElement();
			idStand = s.IdStand;
			showStand = false;
			showAvaliacao = false;
			showLeilao = true;
			showCandidatura = false;
		}
		else
		{
			erro = 1;
		}
	}
	public void Avalia()
	{
		feirante = SistemaFeiras.GetInstance().GetStand(idStand).EmailDono;
		showStand = false;
		showAvaliacao = true;
		showLeilao = false;
		showCandidatura = false;
		erro = 0;
		StateHasChanged();
	}
	public void GetBack()
	{
		InitializeContent();
		showStand = false;
		showAvaliacao = false;
		showLeilao = false;
		showCandidatura = false;
		tabelContent.Unselect();
		StateHasChanged();
	}
	public void Retroceder()
	{
		ShowFeirasComponent showFeirasComponent = ShowFeirasComponent.GetInstace();
		showFeirasComponent.Avalia();
	}
	public void SelecionarStand()
	{
		if(tabelContent.IdValid())
		{
			erro = 0;
			Stand s = tabelContent.GetElement();
			idStand = s.IdStand;
			showCandidatura = true;
			showStand = false;
			showAvaliacao = false;
			showLeilao = false;
		}
		else
		{
			erro = 1;
		}
	}
}
