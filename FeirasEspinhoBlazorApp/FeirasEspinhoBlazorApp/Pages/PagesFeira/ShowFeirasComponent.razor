@page "/showfeiras/{email}"
@using SourceCode.WebClasses;
@using SourceCode.Feiras;
@using SourceCode;
@using SourceCode.Utilizadores;
@using System.Text.Json;
@using FeirasEspinhoBlazorApp.Pages.PagesLeilao;
@inject NavigationManager navigationManager

<PageTitle>Feiras</PageTitle>

@if(showFeira)
{
	<ShowFeiraStandsComponent idFeira="@feiraSelecionada" email="@email"/> 
}
else if (showLeilao)
{
	<ShowFeiraLeilaoComponent idFeira="@feiraSelecionada"/>
}
else
{
	<h3>Feiras disponíveis</h3>
	<br />
	<div>
		@if (erro != 0)
		{
			<WarningComponent mensagem="@codigosErro[erro]" sucess="false" page="3"/>
		}
		<div class="tableFixHead">
			<table>
				<thead>
					<tr>
						<th>Id</th>
						<th>Nome</th>
						<th>Data Início</th>
						<th>Data Fim</th>
						<th>Categoria</th>
						@if (type)
						{
							<th>Preço Candidatura</th>
						}
						else
						{
							<th>Avaliação</th>
						}
					</tr>
				</thead>
				<tbody>
					@foreach (var feira in tabelContent.Content)
					{
							<tr class=@tabelContent.Cssclasses[feira.Item1] @onclick="() => tabelContent.SelectedRow(feira.Item1)">
							<td> @feira.Item2.IDFeira</td>
							<td> @feira.Item2.Nome</td>
							<td> @feira.Item2.DataInicio</td>
							<td> @feira.Item2.DataFim</td>
							<td> @feira.Item2.Categoria</td>
							@if (type)
							{
								<th>@feira.Item2.PrecoCandidatura</th>
							}
							else
							{
								<td> @feira.Item3</td>
							}
						</tr>
					}
				</tbody>
			</table>
		</div>
		<br />
		<div>
			@if(type)
			{
				<button class="buttonA buttonTable1" @onclick="ConsultarStands">Consultar Stands</button>
				<button class="buttonA buttonTable2" @onclick="ConsultarLeiloes">Consultar Leilões</button>
			}
			else
			{
				<button class="buttonA" @onclick="InscreverFeira">Inscrever</button>
			}
		</div>
	</div>
}

@code
{
	[Parameter, EditorRequired]
	public string email { get; set; }
	private bool type;
	private Table<Feira> tabelContent;
	private int erro = 0;
	private Dictionary<int, string> codigosErro = new Dictionary<int, string>();
	private static ShowFeirasComponent showFeiras;
	private bool showFeira = false;
	private bool showLeilao = false;
	private bool showForm = false;
	private int feiraSelecionada = 0;
	protected override void OnInitialized()
	{
		Utilizador utilizador = SistemaFeiras.GetInstance().GetUtilizador(email);
		showFeiras = this;
		List<Feira> feiras;
		type = utilizador is Cliente;
		if(type)
			feiras = SistemaFeiras.GetInstance().MapFeiras.Values.ToList();
		else
			feiras = SistemaFeiras.GetInstance().FeirasNotStarted();
		List<(Feira, int)> conteudo = new List<(Feira, int)>();
		feiras.ForEach(f => conteudo.Add((f, 0)));
		this.tabelContent = new Table<Feira>(conteudo);
		codigosErro[1] = "Nenhuma feira selecionada";
	}
	public static ShowFeirasComponent GetInstace()
	{
		return showFeiras;
	}
	public void CleanWarning()
	{
		this.erro = 0;
		StateHasChanged();
	}
	public void ConsultarStands()
	{
		if (tabelContent.IdValid())
		{
			erro = 0;
			Feira feira = tabelContent.GetElement();
			feiraSelecionada = feira.IDFeira;
			showFeira = true;
			showLeilao = false;
		}
		else
		{
			erro = 1;
		}
	}

	public void ConsultarLeiloes()
	{
		if (tabelContent.IdValid())
		{
			erro = 0;
			Feira feira = tabelContent.GetElement();
			feiraSelecionada = feira.IDFeira;
			showLeilao = true;
			showFeira = false;
		}
		else
		{
			erro = 1;
		}
	}
	public void InscreverFeira()
	{
		if (tabelContent.IdValid())
		{
			erro = 0;
			Feira feira = tabelContent.GetElement();
			feiraSelecionada = feira.IDFeira;
			showFeira = true;
		}
	}

	public void GetBack()
	{
		showLeilao = false;
		showFeira = false;
		showForm = false;
		tabelContent.Unselect();
		StateHasChanged();
	}
}
