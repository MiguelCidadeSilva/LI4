@page "/formfeira/{email}"
@using SourceCode;
@using SourceCode.Feiras;
@inject NavigationManager navigation;
@inject SistemaFeiras facade;


<div>
	<h2>Formulário feira</h2>
	<div>
		@if(erro != 0)
		{
			<WarningComponent mensagem="@codigosErro[erro]" sucess="false" page="16"/>
		}
		else if(sucess)
		{
			<WarningComponent mensagem="Feira adicionada com sucesso" sucess="true" page="16"/>
		}
		<label><b>Nome</b></label>
		<input type="text" class="tb" id="name" name="name" placeholder="Insira aqui o nome da feira" @bind-value="nome"/>
		<br />
		<label><b>Categoria</b></label>
		<input type="text" class="tb" id="cat" name="cat" placeholder="Insira aqui o nome da categoria da feira" @bind-value="categoria"/>
		<br />
		<label><b>Data de Início</b></label>
		<input type="text" class="tb" id="dinit" name="dinit" placeholder="Insira aqui a data de início" @bind-value="dataInit" />
		<br />
		<label><b>Data de Fim</b></label>
		<input type="text" class="tb" id="dfim" name="dfim" placeholder="Insira aqui a data de fim" @bind-value="dataFim"/>
		<br />
		<label><b>Preço candidatura</b></label>
		<input type="text" class="tb" id="dfim" name="dfim"@bind-value="preco"/>
	</div>
	<div>
		<button class="buttonA" @onclick="Confirmar">Confirmar</button>
	</div>
</div>
@code
{
	[Parameter,EditorRequired]
	public string email { get; set; }
	private string nome = "";
	private string categoria = "";
	private string dataInit = "";
	private string dataFim = "";
	private float preco = 0;
	private int erro = 0;
	private bool sucess = false;
	private Dictionary<int, string> codigosErro = new Dictionary<int, string>();
	private static FormFeiraComponent component;
	protected override void OnInitialized()
	{
		component = this;
		codigosErro[1] = "Uma feira tem que ter um nome";
		codigosErro[2] = "Uma feira tem que ter uma data de inicio";
		codigosErro[3] = "Data de inicio no formato errado";
		codigosErro[4] = "Data de fim no formato errado";
		codigosErro[5] = "Preço de candidatura inválido";
	}
	public static FormFeiraComponent GetInstance()
	{
		return component;
	}
	public void CleanWarning()
	{
		erro = 0;
		StateHasChanged();
	}
	private void CleanFields()
	{
		nome = "";
		categoria = "";
		dataInit = "";
		dataFim = "";
		preco = 0;
		erro = 0;
	}
	public void Confirmar()
	{
		// int idFeira, string nome, DateTime dataI, DateTime? dataF, float precoCand, string criadorEmail, int? categoria
		DateTime init;
		if (nome.Length == 0)
			erro = 1;
		else if (dataInit.Length == 0)
			erro = 2;
		else if (dataInit.Count(c => (c == '-')) != 2 || !DateTime.TryParse(dataInit, out init))
			erro = 3;
		else if (dataFim.Length > 0 && (dataFim.Count(c => (c == '-')) != 2 || !DateTime.TryParse(dataFim, out init)))
			erro = 4;
		else if (preco <= 0)
			erro = 5;
		else
		{
			sucess = true;
			DateTime end;
			if (DateTime.TryParse(dataFim, out end))
				facade.AddFeira(new Feira(0, nome, init, end, preco, email, null, 0), categoria);
			else
				facade.AddFeira(new Feira(0, nome, init, null, preco, email, null, 0), categoria);
		}
	}
}
