@page "/login"
@inject NavigationManager navigationManager;
@inject SistemaFeiras facade;
@inject NavBar nav;
@using SourceCode.WebClasses;
@using SourceCode.Utilizadores;
@using Data;
@using SourceCode;
@using System.Text.Json;


<PageTitle>Página de autenticação</PageTitle>


<h1>Feiras Virtuais de Espinho</h1>
<br />
<div class="page">
	<main>
		@if(erro != 0)
		{
			<WarningComponent mensagem="@codigosErro[erro]" sucess="false" page="1" />
		}
		<div>
			<label><b>Email</b></label>
			<input type="text" class="tb" id="email" name="email" placeholder="Insira o seu email" @bind-value="email" />
		</div>
		<br />
		<div>
			<label> <b>Palavra passe</b> </label>
			<input type="password" class="tb" id="password" name="password" @bind-value="password" />
		</div>
		<br />
		<div>
			<button class="buttonA" @onclick="VerificaCredencais">Autenticar</button>
		</div>
	</main>
</div>


@code 
{
	private int erro = 0;
	private string email = "";
	private string password = "";
	private Dictionary<int, string> codigosErro = new();
	protected override async Task OnInitializedAsync()
	{
		this.codigosErro[1] = "Dados de acesso incorretos";
		this.codigosErro[2] = "Campos incompletos";
		this.codigosErro[3] = "Utilizador não existe";
	}
	private void CleanFields()
	{
		email = "";
		password = "";
	}
	private void VerificaCredencais()
	{
		erro = 0;
		StateHasChanged();
		if(email.Length == 0 || password.Length == 0)
		{
			this.erro = 2;
		}
		else 
		{
			try
			{
				Utilizador? user = facade.Login(email,password);
				if (user != null)
				{
					switch (user.GetType().Name)
					{
						case "Cliente":
							nav.LoginCL(email);
							nav.ChangeMenu((int)NavBar.menusNomes.Cliente);
							break;
						case "Feirante":
							nav.LoginFeirante(email);
							nav.ChangeMenu((int)NavBar.menusNomes.Feirante);
							break;
						case "Administrador":
							nav.LoginAdmin(email);
							nav.ChangeMenu((int)NavBar.menusNomes.Admin);
							break;
					}
					nav.State = true;
					navigationManager.NavigateTo("user/" + email);
				}
				else
				{
					erro = 3;
				}
			}
			catch (Exception e)
			{
				this.erro = 3;
				codigosErro[3] = e.Message;
			}
		}
		StateHasChanged();
	}
	public void Logout()
	{
		this.CleanFields();
		StateHasChanged();
	}
}
