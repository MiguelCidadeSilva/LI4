@page "/formstand"
@using SourceCode;
@using SourceCode.WebClasses;
@using SourceCode.Stands;
@inject NavigationManager navigationManager


@if(formProduto)
{
	<FormProdutoComponent page="0" stand="-1"/>
}
else
{
	<PageTitle>Criar Stand</PageTitle>
	<div>
		<h2>Formulário Stand</h2>
		@if(erro != 0)
		{
			<WarningComponent mensagem="@codigosErro[erro]" sucess="false" page="2" />
		}
		else if (sucess)
		{
			<WarningComponent mensagem="@sucmensagem" sucess="true" page="2" />
		}
		<br />
		<div>
			<label> <b>Categoria Stand</b> </label>
			<input type="text" class="tb" id="categoria" name="categoria" @bind-value="categoria" />
		</div>
		<br />
		<div>
			<input type="radio" name="tipo" value="Cliente" @onclick="() => Selected()" checked=@negociavel /><b> Negociavel</b>
		</div>
		<br />
		<div class="tableFixHead">
			<table>
				<thead>
					<tr>
						<th>Produto</th>
						<th>Preço</th>
						<th>Stock</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var produto in table.Content)
					{
						<tr class=@table.Cssclasses[produto.Item1]>
							<td> @produto.Item2.Nome</td>
							<td> @produto.Item2.Preco</td>
							<td> @produto.Item2.Stock</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<br />
		<div>
			<button class="buttonA buttonTable1" @onclick="AdicionarProduto">Adicionar Produto</button>
			<button class="buttonA buttonTable2" @onclick="AdicionarStand">Adicionar Stand</button>
			<button class="buttonA" @onclick="Retroceder">Retroceder</button>
		</div>
	</div>
}

@code 
{
	[Parameter, EditorRequired]
	public string emailFeirante { get; set; }
	private int erro = 0;
	private string sucmensagem;
	private bool sucess = false;
	private bool formProduto = false;
	private string categoria = "";
	private Dictionary<int, string> codigosErro = new Dictionary<int, string>();
	private Table<Produto> table = new Table<Produto>(new List<Produto>());
	private bool negociavel = false;
	private static FormStandComponent formStand;
	private Dictionary<int, float> impostos = new();
	protected override void OnInitialized()
	{
		formStand = this;
	}
	public static FormStandComponent GetInstance()
	{
		return formStand;
	}
	public void AdicionarStand()
	{
		// METER CATEGORIA DIREITA
		// public Stand(int idStand, bool negociavel, int consultates, DateTime dataCriacao, string emailDono, int categoria, List<Produto> produto)
		Stand stand = new Stand(0, negociavel, 0, DateTime.Now, emailFeirante, 0, table.Content.Select(t => t.Item2).ToList());
		SistemaFeiras.GetInstance().AddStand(stand,categoria, impostos.Values.ToList());
		ShowStandsFeiranteComponent.GetInstance().GetBack();
	}
	public void AdicionaProduto(Produto p, float imposto)
	{
		int paux = this.table.AddElement(p);
		impostos.Add(paux, imposto);
	}
	public void AdicionarProduto()
	{
		formProduto = true;
	}
	public void GetBack()
	{
		formProduto = false;
		StateHasChanged();
	}
	public void Selected()
	{
		negociavel = !negociavel;
	}
	public void Retroceder()
	{
		ShowStandsFeiranteComponent.GetInstance().GetBack();
	}
}
