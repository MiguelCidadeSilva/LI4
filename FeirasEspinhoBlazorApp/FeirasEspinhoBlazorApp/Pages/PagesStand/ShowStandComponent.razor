@page "/showstand"
@using SourceCode.WebClasses;
@using SourceCode.Vendas;
@using SourceCode.Stands;
@using SourceCode.Utilizadores;
@using SourceCode;
@using FeirasEspinhoBlazorApp.Pages.PagesFeira;
@using System.Text.Json;

<PageTitle>Stand</PageTitle>

@if(fastPurchase)
{
	<FastPurchaseComponent venda="@venda"/>
}
else if (negociation)
{

	<StartNegociationComponent venda="@venda" returnPage="0"/>
}
else if (formProduto)
{
	<FormProdutoComponent page="1" stand="@idStand"/>
}
else
{
	<div>
		<h3>Bem vindo ao stand</h3>
		<br />
		@if (erro != 0)
		{
			<WarningComponent mensagem="@codigosErro[erro]" sucess="false" page="5"/>
		}
		else if (sucess)
		{
			<WarningComponent mensagem="@sucessMessage" sucess="true" page="5"/>
		}
		<div class="tableFixHead">
			<table>
				<thead>
					<tr>
						<th>Produto</th>
						<th>Nome</th>
						<th>Preço</th>
						<th>Stock</th>
						@if(type)
						{
							<th>Quantidade</th>
						}
						else
						{
							<th>Aumento Stock</th>
						}
					</tr>
				</thead>
				<tbody>
					@foreach (var produto in tabelContent.Content)
					{
						<tr class=@tabelContent.Cssclasses[produto.Item1]>
							<td> @produto.Item2.IdProduto</td>
							<td> @produto.Item2.Nome</td>
							<td> @produto.Item2.Preco</td>
							<td> @produto.Item2.Stock</td>
							<td> <input type="text" class="tb tb_smaller" id="quantidade" name="quantidade" placeholder="Quantidade" @oninput="(args) => RecalculaPrecoTotal(args,produto.Item1)" /></td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<br />
		@if (type)
		{
			<div>
				<br />
				<label><b>Preço total</b></label>
				<input type="text" class="tb tb_smaller" id="precoTotal" name="precoTotal" @bind-value="@precoTotal" readonly="readonly" />
			</div>
			<br />
			<div>
				<button class="buttonA buttonTable1" @onclick="CompraRapida">Comprar Rápida</button>
				<button class="buttonA buttonTable2" @onclick="Negociar">Negociar</button>
				<button class="buttonA" @onclick="Retroceder">Retroceder</button>
			</div>
		}
		else
		{
			<div>
				<button class="buttonA buttonTable1" @onclick="CompraRapida">Adicionar Produto</button>
				<button class="buttonA buttonTable1" @onclick="AumentarStockProduto">Aumentar Stock Produto</button>
				<button class="buttonA buttonTable1" @onclick="EliminarProduto">Eliminar Produto</button>
			</div>
		}
	</div>
}
@code
{
	[Parameter, EditorRequired]
	public int idStand { get; set; }
	[Parameter, EditorRequired]
	public int idFeira { get; set; }
	[Parameter, EditorRequired]
	public string email { get; set; }
	public string sucessStr { get; set; }
	public string sucessMessage { get; set; }
	public string erroStr { get; set; }
	private Stand stand;
	private int erro;
	private Table<Produto> tabelContent;
	private bool sucess;
	private bool fastPurchase = false;
	private bool negociation = false;
	private bool formProduto = false;
	private float precoTotal = 0;
	private bool type;
	private Venda venda;
	private Dictionary<int, string> codigosErro = new Dictionary<int, string>();
	private Dictionary<int, int> quantidades = new Dictionary<int, int>();
	private static ShowStandComponent standComponent;
	private SistemaFeiras facade = SistemaFeiras.GetInstance();
	protected override void OnParametersSet()
	{
		if(!int.TryParse(erroStr, out erro))
			erro = 0;
		if (!bool.TryParse(sucessStr, out sucess))
			sucess = false ;
	}
	private void InitializedTable()
	{
		stand = facade.GetStand(idStand);
		List<Produto> conteudo = stand.Produtos.Where(p => p.Disponivel).ToList();
		this.tabelContent = new Table<Produto>(conteudo);
		for (int i = 0; i < conteudo.Count; i++)
			quantidades[i] = 0;
	}
	protected override async void OnInitialized()
	{
		Utilizador user = facade.GetUtilizador(email);
		standComponent = this;
		InitializedTable();
		type = user is Cliente;
		if(type)
		{
			facade.IncrementConsultantes(idStand);
			codigosErro[2] = "Compra cancelada";
			codigosErro[3] = "Negociação cancelada";
		}
		else
		{
			codigosErro[2] = "Nenhum produto selecionado";
			codigosErro[3] = "Adicionar produto cancelado";
		}
		codigosErro[1] = "Nenhum stand selecionado";
	}
	public static ShowStandComponent GetInstance()
	{
		return standComponent;
	}
	public void CleanWarning()
	{
		this.erro = 0;
		sucess = false;
		StateHasChanged();
	}
	private void RecalculaPrecoTotal(ChangeEventArgs args, int key)
	{
		int number;
		if(int.TryParse(args.Value.ToString(),out number))
			quantidades[key] = number;
		else
			quantidades[key] = 0;
		precoTotal = quantidades.Keys.ToList().Select(id => tabelContent.Content[id].Item2.Preco * quantidades[id]).Sum();
	}
	private void CreateVenda()
	{
		List<(Produto, int)> list = new();
		foreach(var prod in tabelContent.Content)
		{
			list.Add((prod.Item2, quantidades[prod.Item1]));
		}
		venda = new Venda(0,DateTime.Now,precoTotal,email,idFeira,null,idStand,list);
	}
	public void CompraRapida()
	{
		CreateVenda();
		fastPurchase = true;
		negociation = false;
	}
	public void Negociar()
	{
		CreateVenda();
		negociation = true;
		fastPurchase = false;

	}
	public void Retroceder()
	{
		ShowFeiraStandsComponent showFeirasStandsComponent = ShowFeiraStandsComponent.GetInstace();
		showFeirasStandsComponent.GetBack();
	}
	public void ShowStand(int cod)
	{
		sucess = false;
		this.erro = cod;
		fastPurchase = false;
		negociation = false;
		formProduto = false;
		StateHasChanged();
	}

	public void ShowStand(string message)
	{
		InitializedTable();
		this.erro = 0;
		sucess = true;
		sucessMessage = message;
		fastPurchase = false;
		negociation = false;
		formProduto = false;
		StateHasChanged();
	}
	public void AdicionarProduto()
	{
		formProduto = true;
	}

	public void AumentarStockProduto()
	{
		if (tabelContent.IdValid())
		{
			Produto p = tabelContent.GetElement();
			facade.AumentaStock(p.IdProduto, quantidades[tabelContent.GetSelected()]);
			InitializedTable();
		}
		else
			erro = 2;
	}

	public void EliminarProduto()
	{
		if (tabelContent.IdValid())
		{
			Produto p = tabelContent.GetElement();
			facade.EliminaProduto(p.IdProduto);
			InitializedTable();
		}
		else
			erro = 2;
	}
}
